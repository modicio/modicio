import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.22'
    id "org.jetbrains.dokka" version "1.9.0"
    id 'jacoco'
}

group = 'modic.io'
version = '0.3'

java {
    sourceCompatibility = '17'
}

test {
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
    //implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2:2.2.222'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "io.mockk:mockk:1.13.8"
    testImplementation("com.ninja-squad:springmockk:4.0.2")
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        freeCompilerArgs += '-Xjvm-default=all'
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


apply plugin : "org.jetbrains.dokka"

tasks.withType(DokkaTask.class) {
    String dokkaBaseConfiguration = """
    {
      "footerMessage": "(c) 2022 modicio Team @ ST TU-Dresden / Karl Kegel",
      "separateInheritedMembers": false,
      "mergeImplicitExpectActualDeclarations": false
    }
    """
    pluginsMapConfiguration.set(
            // fully qualified plugin name to json configuration
            ["org.jetbrains.dokka.base.DokkaBase": dokkaBaseConfiguration]
    )
}
